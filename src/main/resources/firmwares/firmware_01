
/*
Arduino com shield ethernet com chipset wiznet
Autor Emerson Andrade

Versão: 1.0.7

Codigos das operações:
01 - click
02 - ligarPorta
03 - desligaPorta
04 - lerPortas
99 - Status dos arduino 
*/
#include <SPI.h>
#include <Ethernet.h>
#include <stdio.h>
#include <stdlib.h>

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192,168,1, 177);
EthernetServer server(80);
static String keyArduino = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"; // <-- colocar uma chave com 32 caracteres
static boolean debugMode = false;
                            

void setup()
{
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.begin(9600);
  
  pinMode(6, OUTPUT); 
  pinMode(7, OUTPUT); 
   
  digitalWrite(6, HIGH);
  digitalWrite(7, HIGH);
  
}

void debug(String text){
   if(debugMode){
      Serial.println(text); 
   } 
  
}  

void click(int port, String httpReq){
  int indexOp  = httpReq.indexOf("delay=");
  String delayParam = httpReq.substring( indexOp + 6, indexOp + 8);
  digitalWrite(port, LOW);
  delay(getInt(delayParam) * 1000);//em millisengundos
  digitalWrite(port, HIGH);  
}

void ligaPorta(int port){
  digitalWrite(port, LOW);
} 

void desligaPorta(int port){
  digitalWrite(port, HIGH);
} 

String lerRequest(EthernetClient client){
    String httpReq = ""; 
    boolean currentLineIsBlank = true;
    while (client.connected()) {
       
       if (client.available()) {
          char c = client.read();
          httpReq += c ;
          
           if (c == '\n') {
            currentLineIsBlank = true;
          } else if (c != '\r') {
              currentLineIsBlank = false;
          }
          
           if (c == '\n' && currentLineIsBlank) {
             return httpReq;
           }  
          
       }  
          
     } 
}  


void loop()
{
  // listen for incoming clients
  EthernetClient client = server.available();
  if (client) {
   
    String httpReq = lerRequest(client); 
    
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html");
    client.println();
   
    if(chaveValida(httpReq)){
              
       // Carregando numero da operacao
       int indexOp  = httpReq.indexOf("op=");
       String opParam = httpReq.substring( indexOp + 3, indexOp + 5);
              
        // Carregando numero porta
        int indexPorta  = httpReq.indexOf("port=");
        String portaParam = httpReq.substring(indexPorta  + 5, indexPorta  + 7);
                
        boolean ok = false;
        debug("operacao.: " + opParam);
        switch (getInt(opParam)) {
            case 1:
               debug("Click na porta " + portaParam);
               click( getInt(portaParam), httpReq ); 
                ok = true;
                break;
             case 2:
               debug("Ligando porta " + portaParam);
               ligaPorta(getInt(portaParam));
               ok = true;
                break;
             case 3:
               debug("desligando porta " + portaParam);
                desligaPorta(getInt(portaParam) );  
                ok = true;
                break;
              case 4:
                debug("lendo portas");
                client.println( lerPortas()  );
                ok = true;
                 break; 
               case 99:
                 ok = true;
                 break;
            }
   
            if(ok){
              client.println("<result>OK</result>"); 
            } else{
               client.println("<result>ERROR</result>"); 
            }  
                   
          } else {  
             client.println("<error>ERROR:Chave invalida</error>"); 
          } 
          
           delay(1);
           client.stop();
               
      }
      
      
      
  
}



boolean chaveValida(String httpReq){
  int indexKey = httpReq.indexOf("key=");
  
  String  keyParam = httpReq.substring(indexKey + 4, indexKey + 36);  
   
  debug("key--> " +  keyParam);
  
  if( keyArduino.equals(keyParam) ){
    return true;
  }else {
    return false;
  }  
}

int getInt(String texto){
  int temp = texto.length() + 1;
  char buffer[temp];
  texto.toCharArray(buffer, temp);
  int num = atoi(buffer);
  return num;
} 

String lerPortas(){
    String porta6 = String("06="); 
    porta6 = porta6 +  digitalRead(6) + ";";
   
    String porta7 = String("07=");
    porta7 += digitalRead(7); 
    
    return "<portas>" + porta6 + porta7 +"</portas>";
} 
