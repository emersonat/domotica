
/*
Arduino com shield ethernet com chipset wiznet
Autor Emerson Andrade

Versão: 1.0.4

Codigos das operações:
01 - ligaDesligaPorta
02 - ligarPorta
03 - desligaPorta
99 - Status dos arduino 
*/
#include <SPI.h>
#include <Ethernet.h>
#include <stdio.h>
#include <stdlib.h>

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192,168,1, 177);
EthernetServer server(80);
static String keyArduino = "xxxxxxxxx"; // <-- colocar uma chave com 32 caracteres

void setup()
{
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.begin(9600);
  
  pinMode(6, OUTPUT); 
  pinMode(7, OUTPUT); 
   
  digitalWrite(6, HIGH);
  digitalWrite(7, HIGH);
  
}

boolean chaveValida(String httpReq){
  int indexKey = httpReq.indexOf("key=");
  String  keyParam = httpReq.substring(indexKey + 4, indexKey + 36);  
 
  if( keyArduino.equals(keyParam) ){
    return true;
  }else {
    return false;
  }  
}

int getInt(String texto){
  int temp = texto.length() + 1;
  char buffer[temp];
  texto.toCharArray(buffer, temp);
  int num = atoi(buffer);
  return num;
} 

void ligaDesligaPorta(int port, String httpReq){
  int indexOp  = httpReq.indexOf("delay=");
  String delayParam = httpReq.substring( indexOp + 6, indexOp + 8);
  digitalWrite(port, LOW);
  delay(getInt(delayParam) * 1000);//em millisengundos
  digitalWrite(port, HIGH);  
}

void ligaPorta(int port){
  digitalWrite(port, LOW);
} 

void desligaPorta(int port){
  digitalWrite(port, HIGH);
} 


void loop()
{
  // listen for incoming clients
  EthernetClient client = server.available();
  if (client) {
    
    boolean currentLineIsBlank = true;
    String httpReq = ""; 
   
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        httpReq += c ;
        
        if (c == '\n' && currentLineIsBlank) {
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println();
          
          if(chaveValida(httpReq)){
              
             // Carregando numero da operacao
             int indexOp  = httpReq.indexOf("op=");
             String opParam = httpReq.substring( indexOp + 3, indexOp + 5);
            
             // Carregando numero porta
             int indexPorta  = httpReq.indexOf("port=");
             String portaParam = httpReq.substring(indexPorta  + 5, indexPorta  + 7);
              
              boolean ok = false;
              switch (getInt(opParam)) {
                  case 1:
                    ligaDesligaPorta( getInt(portaParam), httpReq ); 
                    ok = true;
                    break;
                  case 2:
                    ligaPorta(getInt(portaParam));
                    ok = true;
                    break;
                  case 3:
                    desligaPorta(getInt(portaParam) );  
                    ok = true;
                    break;
                 case 99:
                    ok = true;
                    break;
               }
   
               if(ok){
                 client.println("<result>OK</result>"); 
               } else{
                 client.println("<result>ERROR</result>"); 
               }  
             
                    
          } else {  
             client.println("<error>ERROR:Chave invalida</error>"); 
          } 
                         
          break;
        }
           
        if (c == '\n') {
            currentLineIsBlank = true;
        } else if (c != '\r') {
            currentLineIsBlank = false;
        }
      }
    }
   
    
    delay(1);
    client.stop();
  }
}